    var VERSION = '1.0.2';
    var fs = require('fs');

    var instances = {};

    var DBM = function (namespace) {
        var instance = instances[namespace];

        if  (typeof(instance) === 'function') {
            return instance;
        }

        this.dbFile = 'db' + namespace + '.data';

        this.init = function () {
            var data;
            var exists = fs.existsSync(this.dbFile);
            if (exists) {
                data = fs.readFileSync(this.dbFile);
            } else {
                fs.writeFileSync(this.dbFile, '{}', "utf8");
                data = '{}';
            }
            this.buffer = JSON.parse(data);
        };

        this.timestamp = function () {
            return Math.round(new Date().getTime() / 1000);
        };

        this.commit = function () {
            fs.unlinkSync(this.dbFile);
            fs.writeFileSync(this.dbFile, JSON.stringify(this.buffer), "utf8");
            return this;
        };

        this.keys = function (pattern) {
            var collection = [];
            if (pattern.match('%%')) {
                pattern = pattern.split('%%').join('');
            }
            var rows = this.search(pattern);
            if (rows.length) {
                for (var index in rows) {
                    var row = rows[index];
                    collection.push(row);
                }
            }
            return collection;
        };

        this.set = function (key, value, expire) {
            if (typeof(expire) === 'undefined') expire = 0;
            key = key + '#' + expire;
            this.buffer[key] = value;
            return this.commit();
        };

        this.get = function (key) {
            var pattern = key.match('#') ? key : key + '#';
            var rows = this.search(pattern);
            if (rows.length) {
                key = rows[0];
                return this.buffer[key] ? this.buffer[key] : null;
            }
            return null;
        };

        this.expire = function (key, ttl) {
            if (typeof(ttl) === 'undefined') ttl = 3600;
            var val = this.get(key);
            return this.set(key, val, this.timestamp() + ttl);
        };

        this.incr = function (key, by) {
            if (typeof(by) === 'undefined') by = 1;
            var val = this.get(key);
            if (null === val) {
                val = 1;
            } else {
                val = parseInt(val);
                val += by;
            }
            this.set(key, val);
            return val;
        };

        this.decr = function (key, by) {
            if (typeof(by) === 'undefined') by = 1;
            var val = this.get(key);
            if (null === val) {
                val = 0;
            } else {
                val = parseInt(val);
                val -= by;
                val = 0 > val ? 0 : val;
            }
            this.set(key, val);
            return val;
        };

        this.delete = function (key) {
            return this.del(key);
        };

        this.del = function (key) {
            var rows = this.search(key + '#');
            if (rows.length) {
                key = rows[0];
                delete this.buffer[key];
                this.commit();
            }
            return this;
        };

        this.search = function (pattern) {
            var collection = [];
            for (var key in this.buffer) {
                if (key.match(pattern)) {
                    collection.push(key);
                }
            }
            return collection;
        };

        this.clean = function () {
            var rows = this.search('#');
            if (rows.length) {
                for (var row in rows) {
                    var tab = row.split('#');
                    var expire = tab[1];
                    if (expire > 0 && expire < this.timestamp()) {
                        this.del(key);
                    }
                }
            }
        };

        this.lock = function () {
            var file = this.dbFile.split('.data').join('.lock');
            fs.writeFileSync(file, this.timestamp(), "utf8");
            return this;
        };

        this.unlock = function () {
            var file = this.dbFile.split('.data').join('.lock');
            fs.unlinkSync(file);
            return this;
        };

        this.isLocked = function () {
            var file = this.dbFile.split('.data').join('.lock');
            return fs.existsSync(file) ? 1 : '';
        };

        this.init();
        this.clean();
        instances[namespace] = this;
    };

    module.exports = DBM;
